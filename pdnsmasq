#!/usr/bin/env python3

import logging
import json
import requests
from types import SimpleNamespace
from systemd.journal import JournalHandler
from os import environ
from os.path import basename
from sys import argv
from socket import inet_aton

logname = f'{basename(__file__)}'
log = logging.getLogger(logname)
log.addHandler(JournalHandler(SYSLOG_IDENTIFIER=logname))
log.setLevel(logging.DEBUG)

class PDNSMASQ(object):
    def __init__(self):

        # Configure parameters
        self.config()

        # Add or delete the record, otherwise exit
        self.action = argv[1] if argv[1] in ['add','del'] else exit()

        # Set record content from valid IP address or exit
        self.content  = argv[3] if self.valid_ip(argv[3]) else None
        if self.content is None:
            log.info('Invalid IP address. Adios')
            exit()

        
        # Set DNS hostname of the current client
        self.set_dns_record()

        # Construct the payload
        self.set_payload()

        # Execute the API request
        self.apipatch()

    def config(self):
        try:
            # Get some settings from the environment
            self.zone = environ.get('DNSMASQ_DOMAIN')
            self.ttl = environ.get('DNSMASQ_TIME_REMAINING', 3600)

            # Load Pdns settings+secrets
            with open(f'{__file__}.json') as f: cfg_data = f.read()
            cfg = json.loads(cfg_data, object_hook=lambda d: SimpleNamespace(**d))
            self.macaddr = argv[2]
            self.headers = {'X-API-Key': cfg.apikey}
            self.uri = f'http://{cfg.host}/api/v1/servers/localhost/zones/{self.zone}'

            #log.debug([(k,v) for k, v in sorted(environ.items())])
        except IOError:
            log.error('file not found')
        except Exception as e:
            log.error(type(e),e)

    def set_payload(self):
        self.recordType = 'A'
        self.priority = 0
        self.disabled = False
        self.setPTR = 'false'
        if argv[1] in ['add']:
            self.payload = {
                'rrsets': [{
                    'name': self.dns_record,
                    'type': self.recordType,
                    'changetype': 'REPLACE',
                    'ttl': int(self.ttl),
                    'records': [{
                        'content': self.content,
                        'disabled': self.disabled,
                        'name': self.dns_record,
                        'ttl': int(self.ttl),
                        'set-ptr': self.setPTR,
                        'type': self.recordType,
                        'priority': self.priority}]}]}

        elif argv[1] == 'del':
            self.payload = {
                'rrsets': [{
                    'name': self.dns_record,
                    'type': self.recordType,
                    'changetype': 'DELETE'}]}

    def apipatch(self):
        try:
            log.debug(self.payload)
            r = requests.patch(
                    self.uri,
                    data=json.dumps(self.payload),
                    headers=self.headers
                )
            if r.status_code not in [200, 204]:
                log.error([r.status_code,self.uri,self.payload])
            else:
                log.info(f'{self.dns_record} updated')
        except Exception as e:
            log.error(type(e),e)        

    def valid_ip(self,addr):
        try:
            inet_aton(addr)
            return True
        except:
            return False

    def set_dns_record(self):
        hostname = argv[4] if len(argv)==5 else f"x{self.macaddr[-8:].replace(':','')}"
        self.dns_record = f"{hostname}.{self.zone}."

if __name__ == "__main__":
  log.debug(argv)
  # Pre-flight check
  if len(argv) >= 4:
    PDNSMASQ()


