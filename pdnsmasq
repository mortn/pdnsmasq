#!/usr/bin/env python3

import logging
import json
import requests
from types import SimpleNamespace
from systemd.journal import JournalHandler
from os import environ
from os.path import basename
from sys import argv
from socket import inet_aton

logname = f'{basename(__file__)}'
log = logging.getLogger(logname)
log.addHandler(JournalHandler(SYSLOG_IDENTIFIER=logname))
log.setLevel(logging.DEBUG)

class PDNSMASQ(object):
    def __init__(self):
        self.recordType = 'A'
        self.priority = 0
        self.disabled = False
        self.setPTR = 'false'
        self.config()

        # Set record content from valid IP address or exit
        self.content  = argv[3] if self.valid_ip(argv[3]) else None
        if self.content is None:
            log.info('Invalid IP address. Adios')
            exit()

        self.set_hostname()

        #self.set_payload()

        # What are we doing. Dnsmasq sends action as first arg
        if argv[1] in ['add']:
            self.add_record()
        elif argv[1] == 'del':
            self.del_record()
        else:
            log.info('Got passive-aggressive none-action?!')
            exit()

    def config(self):
        try:
            # Some settings we get from the environment
            self.zone = environ.get('DNSMASQ_DOMAIN')
            self.ttl = environ.get('DNSMASQ_TIME_REMAINING', 3600)

            # Read Pdns settings 
            with open(f'{__file__}.json') as f: cfg_data = f.read()
            cfg = json.loads(cfg_data, object_hook=lambda d: SimpleNamespace(**d))
            self.macaddr = argv[2]
            self.headers = {'X-API-Key': cfg.apikey}
            self.uri = f'http://{cfg.host}/api/v1/servers/localhost/zones/{self.zone}'

            #log.debug([(k,v) for k, v in sorted(environ.items())])
        except IOError:
            log.error('file not found')
        except Exception as e:
            log.error(type(e),e)

    def set_payload(self):
        if argv[1] in ['add']:
            payload = {
            'rrsets': [{
                'name': self.dns_record, 
                'type': self.recordType,
                'ttl': int(self.ttl), 
                'changetype': 'REPLACE',
                'records': [{
                    'content': self.content,
                    'disabled': self.disabled,
                    'name': self.dns_record,
                    'ttl': int(self.ttl),
                    'set-ptr': self.setPTR,
                    'type': self.recordType,
                    'priority': self.priority}]}]}

        elif argv[1] == 'del':
            payload = {
            'rrsets': [{
                'name': self.dns_record,
                'type': self.recordType,
                'changetype': 'DELETE'}]}

    def add_record(self):
        try:
            payload = {
            'rrsets': [{'name': self.dns_record, 
                'type': self.recordType,
                'ttl': int(self.ttl), 
                'changetype': 'REPLACE',
                'records': [{
                    'content': self.content,
                    'disabled': self.disabled,
                    'name': self.dns_record,
                    'ttl': int(self.ttl),
                    'set-ptr': self.setPTR,
                    'type': self.recordType,
                    'priority': self.priority}]}]}
            r = (requests.patch(self.uri, data=json.dumps(payload),headers=self.headers))

            if r.status_code not in [200, 204]:
                return_msg = {
                    'status_code': r.status_code,
                    'error': r.json().get('error'),
                    'payload': payload}
                log.debug(json.dumps(return_msg))
            else:
                return_msg = {
                    'status_code': r.status_code,
                    'msg': f'{self.dns_record} added/updated'
                }
                log.debug(json.dumps(return_msg))
        except Exception as e:
            log.error(type(e),e)

    def del_record(self):
        try:
            payload = {'rrsets': [{
                'name': self.dns_record,
                'type': self.recordType,
                'changetype': 'DELETE'}]}
            r = (requests.patch(self.uri, data=json.dumps(payload),headers=self.headers))

            if r.status_code not in [200, 204]:
                return_msg = {
                    'status_code': r.status_code,
                    'error': r.json().get('error'),
                    'payload': payload}
                log.debug(json.dumps(return_msg))
            else:
                return_msg = {
                    'status_code': r.status_code,
                    'msg': f'{self.dns_record} added/updated'
                }
                log.debug(json.dumps(return_msg))
        except Exception as e:
            log.error(type(e),e)
    
        
    def valid_ip(self,addr):
        try:
            inet_aton(addr)
            return True
        except:
            return False

    def set_hostname(self):
        hostname = argv[4] if len(argv)==5 else f"x{self.macaddr[-8:].replace(':','')}"
        self.dns_record = f"{hostname}.{self.zone}."


if __name__ == "__main__":
  log.debug(argv)
  # Pre-flight check
  if len(argv) >= 4: 
    PDNSMASQ()


